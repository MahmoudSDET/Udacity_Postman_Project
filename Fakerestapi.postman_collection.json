{
	"info": {
		"_postman_id": "8e39682c-212e-4dc3-814d-5961aa48109a",
		"name": "Fakerestapi",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "12451366"
	},
	"item": [
		{
			"name": "/api/v1/Authors",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Check Body contains 'id' , 'idBook' , 'firstName' , 'lastName'\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"id\");\r",
							"    pm.expect(pm.response.text()).to.include(\"idBook\");\r",
							"    pm.expect(pm.response.text()).to.include(\"firstName\");\r",
							"    pm.expect(pm.response.text()).to.include(\"lastName\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}api/v1/Authors",
					"host": [
						"{{BaseUrl}}api"
					],
					"path": [
						"v1",
						"Authors"
					]
				}
			},
			"response": []
		},
		{
			"name": "/api/v1/Authors",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.sendRequest('https://fakerestapi.azurewebsites.net/api/v1/Authors', function (err, res) {\r",
							"    console.log(res);\r",
							"    \r",
							"    console.log(res.json()[res.json().length-1].id+1);\r",
							"    pm.collectionVariables.set(\"IdAuthor\",res.json()[res.json().length-1].id+1);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"\r",
							"\r",
							"\r",
							"// expected result\r",
							"pm.test(\"Check the status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"var expected=pm.collectionVariables.get(\"IdAuthor\")\r",
							"\r",
							"// actual\r",
							"\r",
							"pm.test(\"Validate the Author id is created\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.id).to.eql(parseInt(expected));\r",
							"});\r",
							"pm.test(\"firstName or lastName is mandatory\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": {{IdAuthor}},\r\n  \"idBook\": {{BookId}},\r\n  \"firstName\": \"Mahmoud\",\r\n  \"lastName\": \"Abdul Fattah\"\r\n}\r\n"
				},
				"url": {
					"raw": "{{BaseUrl}}api/v1/Authors",
					"host": [
						"{{BaseUrl}}api"
					],
					"path": [
						"v1",
						"Authors"
					]
				}
			},
			"response": []
		},
		{
			"name": "/api/v1/Authors/{id}",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// expected result\r",
							"\r",
							"var expectedresult=pm.collectionVariables.get(\"NewUpdatedBookId\")\r",
							"\r",
							"\r",
							"// actual\r",
							"/*\r",
							"pm.test(\"Validate the Book id  is updated successfully\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.idBook).to.eql(parseInt(expectedresult));\r",
							"\r",
							"\r",
							"});*/\r",
							"\r",
							"pm.test(\"Validate that firstName is 'Mahmoud' and lastName is 'Abdul Fattah'\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.firstName).to.eql(\"Mahmoud\");\r",
							"    pm.expect(jsonData.lastName).to.eql(\"Abdul Fattah\");\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"\r",
							"var updatebookid=pm.collectionVariables.get(\"NewUpdatedBookId\");\r",
							"\r",
							"pm.collectionVariables.set(\"BookId\",updatebookid);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": {{IdAuthor}},\r\n  \"idBook\":{{NewUpdatedBookId}},\r\n  \"firstName\": \"Mahmoud\",\r\n  \"lastName\": \"Abdul Fattah\"\r\n}"
				},
				"url": {
					"raw": "{{BaseUrl}}api/v1/Authors/{{IdAuthor}}",
					"host": [
						"{{BaseUrl}}api"
					],
					"path": [
						"v1",
						"Authors",
						"{{IdAuthor}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "/api/v1/Authors/{id}",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Check firstName is 'Mahmoud' and lastName is 'Abdul Fattah'\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.firstName).to.eql(\"Mahmoud\");\r",
							"    pm.expect(jsonData.lastName).to.eql(\"Abdul Fattah\");\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}api/v1/Authors/{{IdAuthor}}",
					"host": [
						"{{BaseUrl}}api"
					],
					"path": [
						"v1",
						"Authors",
						"{{IdAuthor}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "/api/v1/Authors/authors/books/{idBook}",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// expected result\r",
							"\r",
							"var expectedresult=pm.collectionVariables.get(\"BookId\")\r",
							"\r",
							"console.log()\r",
							"// actual\r",
							"\r",
							"pm.test(\"Validate the bookes id is returned successfully with Author\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[0].idBook).to.eql(parseInt(expectedresult));\r",
							"    pm.expect(jsonData[1].idBook).to.eql(parseInt(expectedresult));\r",
							"    pm.expect(jsonData[2].idBook).to.eql(parseInt(expectedresult));\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}api/v1/Authors/authors/books/{{BookId}}",
					"host": [
						"{{BaseUrl}}api"
					],
					"path": [
						"v1",
						"Authors",
						"authors",
						"books",
						"{{BookId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "/api/v1/Authors/{id}",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}api/v1/Authors/{{IdAuthor}}",
					"host": [
						"{{BaseUrl}}api"
					],
					"path": [
						"v1",
						"Authors",
						"{{IdAuthor}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "IdAuthor",
			"value": "",
			"type": "string"
		},
		{
			"key": "AuthorFirstName",
			"value": "TestFirstName1",
			"type": "string"
		},
		{
			"key": "AuthorLastName",
			"value": "TestFirstName2",
			"type": "string"
		},
		{
			"key": "BookId",
			"value": "2",
			"type": "string"
		},
		{
			"key": "NewUpdatedBookId",
			"value": "10",
			"type": "string"
		}
	]
}